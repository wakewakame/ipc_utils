cmake_minimum_required(VERSION 3.1)

set(LIBRARIES_PATH "${CMAKE_SOURCE_DIR}/3rdparty")
if (NOT EXISTS ${LIBRARIES_PATH})
	message(STATUS "create directory : ${LIBRARIES_PATH}")
	file(MAKE_DIRECTORY "${LIBRARIES_PATH}")
endif (NOT EXISTS ${LIBRARIES_PATH})
set(BOOST_URL "https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.zip")
set(BOOST_ZIP_PATH "${LIBRARIES_PATH}/boost-boost-1.73.0.zip")
set(BOOST_DIR_PATH "${LIBRARIES_PATH}/boost_1_73_0")
if (NOT EXISTS ${BOOST_DIR_PATH})
	if (NOT EXISTS ${BOOST_ZIP_PATH})
		message(STATUS "download : ${BOOST_URL}")
		message(STATUS "it takes long time...")
		if (WIN32)
			file(TO_NATIVE_PATH ${BOOST_ZIP_PATH} BOOST_ZIP_PATH_BACKSLASH)
			execute_process(COMMAND cmd /c start /wait bitsadmin /transfer boostDownloadJob /dynamic /download /priority FOREGROUND ${BOOST_URL} ${BOOST_ZIP_PATH_BACKSLASH} WORKING_DIRECTORY ${LIBRARIES_PATH})
		elseif (UNIX)
			execute_process(COMMAND wget ${BOOST_URL} -O ${BOOST_ZIP_PATH} WORKING_DIRECTORY ${LIBRARIES_PATH})
		endif (WIN32)
	endif (NOT EXISTS ${BOOST_ZIP_PATH})
	if (NOT EXISTS ${BOOST_ZIP_PATH})
		message(FATAL_ERROR "error : download was failed")
	endif (NOT EXISTS ${BOOST_ZIP_PATH})
	message(STATUS "unzip : ${BOOST_ZIP_PATH}")
	execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ${BOOST_ZIP_PATH} WORKING_DIRECTORY ${LIBRARIES_PATH})
endif (NOT EXISTS ${BOOST_DIR_PATH})
if (NOT EXISTS ${BOOST_DIR_PATH})
	file(REMOVE ${BOOST_ZIP_PATH})
	message(FATAL_ERROR "error : unzip was failed")
endif (NOT EXISTS ${BOOST_DIR_PATH})

enable_language(CXX)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
find_package(Threads REQUIRED)

project(ipc_utils)

if(MSVC)
	if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
		string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	else()
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
	endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-long-long -pedantic")
endif()

file(GLOB_RECURSE ALL_CPP_FILES "${CMAKE_SOURCE_DIR}/src/*.cpp")
add_executable(ipc_utils "${ALL_CPP_FILES}")

target_include_directories(ipc_utils PRIVATE ${BOOST_DIR_PATH})
target_link_libraries(ipc_utils Threads::Threads)
